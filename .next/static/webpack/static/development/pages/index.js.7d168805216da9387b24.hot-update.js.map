{"version":3,"file":"static/webpack/static/development/pages/index.js.7d168805216da9387b24.hot-update.js","sources":["webpack:///./components/NavigationBar/NavigationBar.tsx","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/arrayWithHoles.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/iterableToArrayLimit.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/nonIterableRest.js","webpack:///./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Link from 'next/link';\nimport iugaLogoImage from '../_assets/navbarImages/IUGA-header-image.jpg';\nimport './NavigationBar.css';\nimport { Collapse, Navbar, NavbarToggler, Nav, NavItem } from 'reactstrap';\nimport { navigationBarLinks, NavigationBarLink } from '../_data/navigationBarLinks';\n\ntype NavigationBarProps = {\n    page: string\n}\n\n/**\n * NavigationBar is the main navigation bar of the IUGA website. A lot of it is boilerplate code\n * that can be found on the reactstrap documentation: \n * \n * https://reactstrap.github.io/components/navbar/\n * \n * Note that at the moment the Reactstrap documentation has a dependency that's actually blocked by\n * adblockers.\n * \n * Last Modified:\n *      William Kwok\n *      June 5, 2019\n */\nexport const NavigationBar: React.FC<NavigationBarProps> = () => {\n    const [isOpen, setIsOpen] = useState<boolean>(false);\n\n    return <header>\n        <Navbar className=\"navigation-bar\" light expand=\"md\">\n            <Link href=\"/\">\n                <a>\n                    <img alt=\"IUGA Logo\" id=\"iuga-logo\" src={iugaLogoImage} />\n                </a>\n            </Link>\n            <NavbarToggler onClick={() => setIsOpen(!isOpen)} />\n            <Collapse isOpen={isOpen} navbar>\n                <Nav className=\"ml-auto\" navbar>\n                    {navigationBarLinks.map((navbarLink: NavigationBarLink) => {\n                        return <NavItem className=\"navbar-item\" key={navbarLink.name}>\n                            <Link href={navbarLink.link}>\n                                <a className=\"navbar-link\">{navbarLink.name}</a>\n                            </Link>\n                        </NavItem>\n                    })}\n                </Nav>\n            </Collapse>\n        </Navbar>\n    </header>\n}","import _Array$isArray from \"../../core-js/array/is-array\";\nexport default function _arrayWithHoles(arr) {\n  if (_Array$isArray(arr)) return arr;\n}","import _getIterator from \"../../core-js/get-iterator\";\nexport default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = _getIterator(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;AAaA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAKA;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;ACHA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzBA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;ACFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}